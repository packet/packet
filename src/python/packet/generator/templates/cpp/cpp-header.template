<%inherit file="cpp-base.template" />\

<%block name="header">\
// Automatically generated by Packet C++ code generator.

#ifndef ${self.header_macro()}
#define ${self.header_macro()}

${self.common_include()}\

% for packet in pom.includes.values():
${self.include(packet.namespace)}
% endfor
</%block>\

% for name, enum in pom.enums.iteritems():
enum class ${name} {
  % for name, item in enum.items.iteritems():
  ${name} = ${item.value},
  % endfor
};

% endfor

% for name, packet in pom.packets.iteritems():
<%
  cpp_class_name = self.class_name(packet)
  cpp_parent_class = self.get_parent(packet)
%>\
class ${cpp_class_name} : public ${self.get_parent(packet)} {
 public:
  enum class SubPackets {
  % for p in packet.children:
    ${self.class_name(p).upper()},
  % endfor
  };

  ${self.iovector_constructor_prototype(packet)};
  ${self.size_constructor_prototype(packet, packet.min_size)};
  virtual ~${cpp_class_name}();

  ${self.init_method_decl(packet)}

% for field in packet.fields:
  ${self.getter_decl(field)}
  ${self.setter_decl(field)}
% endfor

  ${self.size_decl(packet)}
  ${self.static_size_decl(packet)}

% for field in packet.fields:
  ${self.static_getter_decl(field)}
  ${self.static_setter_decl(field)}
% endfor

 protected:
% for field in packet.fields:
  ${self.offset_decl(field)}
  % if not field.has_fixed_size():
  ${self.field_size_decl(field)}
  % endif
% endfor

 private:
  const static size_t MIN_SIZE = ${packet.min_size};
};

% endfor
\
<%def name="getter_decl(field)" buffered="True" filter="trim">
  ${self.getter_prototype(field)};
</%def>\
\
<%def name="static_getter_decl(field)" buffered="True" filter="trim">
  ${self.static_getter_prototype(field)};
</%def>\
\
<%def name="setter_decl(field)" buffered="True" filter="trim">
  ${self.setter_prototype(field)};
</%def>\
\
<%def name="static_setter_decl(field)" buffered="True" filter="trim">
  ${self.static_setter_prototype(field)};
</%def>\
\
<%def name="offset_decl(field)" buffered="True" filter="trim">
  ${self.offset_prototype(field)};
</%def>\
\
<%def name="field_size_decl(packet)" buffered="True" filter="trim">
  ${self.field_size_prototype(packet)};
</%def>\
\
<%def name="size_decl(packet)" buffered="True" filter="trim">
  virtual ${self.size_prototype(packet)};
</%def>\
\
<%def name="static_size_decl(packet)" buffered="True" filter="trim">
  ${self.static_size_prototype(packet)};
</%def>\
\
<%def name="header_macro()" buffered="True" filter="trim">
  ${'PACKET_GEN_%s_' % pom.namespace.upper()}
</%def>\
\
<%def name="init_method_decl(packet)" buffered="True" filter="trim">
  ${self.init_method_prototype(packet)};
</%def>\

<%block name="footer">
namespace cyrus {
namespace concurrency {
namespace internal {
% for name, packet in pom.packets.iteritems():
<%
  cpp_class_name = self.class_name(packet, qualified=True)
%>\

template <>
MessageSerializer* get_default_serializer<${cpp_class_name}>(
    SerializationManager* manager);

% endfor
}  // namespace internal
}  // namespace concurrency
}  // namespace cyrus

#endif  // ${self.header_macro()}
</%block>
