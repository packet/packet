<%!
  from packet.generator.cpp import CppNamingStrategy
  from packet.generator.cpp import TYPE_VARIANTS
%>
<%
  self.cpp_naming = CppNamingStrategy()
%>

<%block name="header">\
// Automatically generated by Packet C++ code generator.\
</%block>\

<%block name="ns_openning">\
namespace ${self.namespace_name(pom)} {\
</%block>\

${self.body()}

<%block name="ns_closing">\
}  // namespace ${self.namespace_name(pom)}\
</%block>

<%block name="footer" />
<%def name="namespace_name(pom)" buffered="True" filter="trim">
  ${pom.namespace}
</%def>

<%def name="class_name(packet, qualified=False)" buffered="True" filter="trim">
% if qualified:
  ::${namespace_name(packet.pom)}::${packet.name}
% else:
  ${self.cpp_naming.get_class_name(packet.name)}
% endif
</%def>

<%def name="type_name(type, const=False, variant=TYPE_VARIANTS.NONE)"
      buffered="True" filter="trim">
  ${self.cpp_naming.get_cpptype_name(type, const, variant)}
</%def>

<%def name="get_parent(packet)" buffered="True" filter="trim">
% if packet.parent:
  ${self.class_name(packet.parent, qualified=True)}
% else:
  ::cyrus::io::Packet
% endif
</%def>

<%def name="include(namespace, include_prefix='')" buffered="True"
      filter="trim">
#include "${include_prefix + namespace}.h"\
</%def>

<%def name="method_prototype(const=False, qualified=False, static=False)"
      buffered="True" filter="trim">
  ${'static' if static else ''} ${caller.return_type()} ${caller.class_name() + '::' if qualified else ''}${caller.method_name()}(${caller.args()}) ${'const' if const else ''}
</%def>

<%def name="getter_prototype(field, qualified=False)" buffered="True"
      filter="trim">
  <%self:method_prototype qualified="${qualified}" const="True">
    <%def name="return_type()" filter="trim">
      ${self.type_name(field.type)}
    </%def>
    <%def name="method_name()" filter="trim">
      get_${field.name}
    </%def>
    <%def name="class_name()" filter="trim">
      ${self.class_name(field.packet)}
    </%def>
    <%def name="args()" filter="trim" />
  </%self:method_prototype>
</%def>

<%def name="static_getter_name(field)" buffered="True" filter="trim">
  get_${field.name}_
</%def>

<%def name="static_getter_prototype(field, qualified=False)" buffered="True"
      filter="trim">
  <%self:method_prototype qualified="${qualified}" const="True" static="True">
    <%def name="return_type()" filter="trim">
      ${self.type_name(field.type)}
    </%def>
    <%def name="method_name()" filter="trim">
      ${self.static_getter_name(field)}
    </%def>
    <%def name="class_name()" filter="trim">
      ${self.class_name(field.packet)}
    </%def>
    <%def name="args()" filter="trim">
      const IoVector& io_vector
    </%def>
  </%self:method_prototype>
</%def>

<%def name="setter_prototype(field, qualified=False)" buffered="True" filter="trim">
  <%self:method_prototype qualified="${qualified}">
    <%def name="return_type()" filter="trim">
      void
    </%def>
    <%def name="method_name()" filter="trim">
      set_${field.name}
    </%def>
    <%def name="class_name()" filter="trim">
      ${self.class_name(field.packet)}
    </%def>
    <%def name="args()" filter="trim">
      ${self.type_name(field.type, variant=TYPE_VARIANTS.RVALUE)} ${field.name}
    </%def>
  </%self:method_prototype>
</%def>

<%def name="static_setter_name(field)" buffered="True" filter="trim">
  set_${field.name}_
</%def>

<%def name="static_setter_prototype(field, qualified=False)" buffered="True" filter="trim">
  <%self:method_prototype qualified="${qualified}" static="True">
    <%def name="return_type()" filter="trim">
      void
    </%def>
    <%def name="method_name()" filter="trim">
      ${self.static_setter_name(field)}
    </%def>
    <%def name="class_name()" filter="trim">
      ${self.class_name(field.packet)}
    </%def>
    <%def name="args()" filter="trim">
      ${self.type_name(field.type, variant=TYPE_VARIANTS.RVALUE)} ${field.name}, const IoVector& io_vector
    </%def>
  </%self:method_prototype>
</%def>

<%def name="offset_method_name(field)" buffered="True" filter="trim">
  get_${field.name}_offset
</%def>

<%def name="offset_prototype(field, qualified=False)" buffered="True"
      filter="trim">
  <%self:method_prototype qualified="${qualified}" const="True" static="True">
    <%def name="return_type()" filter="trim">
      size_t
    </%def>
    <%def name="method_name()" filter="trim">
      ${offset_method_name(field)}
    </%def>
    <%def name="class_name()" filter="trim">
      ${self.class_name(field.packet)}
    </%def>
    <%def name="args()" filter="trim">
      const IoVector& io_vector
    </%def>
  </%self:method_prototype>
</%def>

<%def name="get_size_prototype(packet, qualified=False)" buffered="True"
      filter="trim">
  <%self:method_prototype qualified="${qualified}" const="True" static="True">
    <%def name="return_type()" filter="trim">
      size_t
    </%def>
    <%def name="method_name()" filter="trim">
      get_size
    </%def>
    <%def name="class_name()" filter="trim">
      ${self.class_name(packet)}
    </%def>
    <%def name="args()" filter="trim">
      const IoVector& io_vector
    </%def>
  </%self:method_prototype>
</%def>
