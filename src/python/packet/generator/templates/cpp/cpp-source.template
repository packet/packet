<%inherit file="cpp-base.template" />\
<%!
  from packet.generator.cpp import BuiltInType
%>\
<%block name="header">\
${parent.header()}

% for packet in pom.includes.values():
${self.include(packet.namespace)}
% endfor
${self.include(pom.namespace)}
</%block>\

% for name, packet in pom.packets.iteritems():
<%
  cpp_class_name = self.class_name(packet)
  cpp_parent_class = self.get_parent(packet)
%>\

${cpp_class_name}::${cpp_class_name}(size_t packet_size) {
}

${cpp_class_name}::${cpp_class_name}(const IoVector& io_vector,
    size_t packet_size) {
}

${cpp_class_name}::~${cpp_class_name}() {
}

% for field in packet.fields:
<%
  cpp_type_name = self.cpp_naming.get_cpptype_name(field.type)
%>\
${self.getter_prototype(field, qualified=True)} {
  return ${cpp_class_name}::${self.static_getter_name(field)}(vector, packet_size);
}

${self.static_getter_prototype(field, qualified=True)} {
  auto offset = ${cpp_class_name}::${self.offset_method_name(field)}(vector, packet_size);
  return this->get_vector().read_data<${cpp_type_name}>(offset);
}

${self.setter_prototype(field, qualified=True)} {
  return ${cpp_class_name}::${self.static_setter_name(field)}(vector, packet_size);
}

${self.static_setter_prototype(field, qualified=True)} {
  auto offset = ${cpp_class_name}::${self.offset_method_name(field)}(vector, packet_size);
  this->get_vector().write_data<${cpp_type_name}>(${field.name}, offset);
}
% endfor

% for field in packet.fields:
${self.offset_prototype(field, qualified=True)} {
}
% endfor

template<>
${cpp_class_name} make_packet<${cpp_class_name}>(const IoVector& io_vec, size_t packet_size) {
  % for p in packet.children:
  if (${self.type_selector_cond(p)}) {
    return make_packet<${self.class_name(p)}>(io_vec, packet_size);
  }
  % endfor
  return ${cpp_class_name}(io_vec, packet_size);
}

% endfor

<%def name="type_selector_cond(packet)" buffered="True" filter="trim">
  <%
    annot = packet.annotations.get('type_selector')
    assert annot, 'Type selector cannot be empty for %s' % packet.name
  %>
  % if annot:
    % for param in annot.params:
     ${self.class_name(packet.parent)}::${self.static_getter_name(param)}(io_vec, packet_size) == ${param.value}
    % endfor
  % endif
</%def>

