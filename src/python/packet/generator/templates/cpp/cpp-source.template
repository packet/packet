<%inherit file="cpp-base.template" />\
<%!
  from packet.generator.cpp import BuiltInType
%>\
<%block name="header">\
${parent.header()}

${self.common_include()}\

% for packet in pom.includes.values():
${self.include(packet.namespace)}
% endfor
% for packet in pom.packets.values():
  % for child in packet.children:
    % if child.pom.namespace != packet.pom.namespace:
${self.include(child.pom.namespace)}
    % endif
  % endfor
% endfor
${self.include(pom.namespace)}
</%block>\

% for name, packet in pom.packets.iteritems():
<%
  cpp_class_name = self.class_name(packet)
  cpp_parent_class = self.get_parent(packet)
%>\

${cpp_class_name}::${self.iovector_constructor_prototype(packet)}
    : ${cpp_parent_class}(io_vector) {}

${cpp_class_name}::${self.size_constructor_prototype(packet)}
    : ${cpp_class_name}(cyrus::io::IoVector(size)) {
  ${self.init_method_name(packet)}();
}

${cpp_class_name}::~${cpp_class_name}() {}

${self.init_method_prototype(packet, qualified=True)} {
  ${cpp_class_name}::${self.setter_name(packet.size_field)}(MIN_SIZE);
}

% for field in packet.fields:
<%
  cpp_type_name = self.field_type_name(field)
%>\
${self.getter_prototype(field, qualified=True)} {
  return ${cpp_class_name}::${self.static_getter_name(field)}(vector);
}

${self.static_getter_prototype(field, qualified=True)} {
  auto offset = ${cpp_class_name}::${self.offset_method_name(field)}(io_vector);
  % if field.is_variable_length():
  auto size = ${cpp_class_name}::${self.static_size_method_name(packet)}(io_vector);
    % if field.get_size_field():
  auto count = ${cpp_class_name}::${self.static_getter_name(field.size_field)}(io_vector);
    % else:
  auto count = 0;
    % endif
  return io_vector.read_repeated_data<${self.type_name(field.type)}>(offset, count, size);
  % else:
  return io_vector.read_data<${cpp_type_name}>(offset);
  % endif
}

${self.setter_prototype(field, qualified=True)} {
  ${cpp_class_name}::${self.static_setter_name(field)}(
      ::std::move(${field.name}), vector);
}

${self.static_setter_prototype(field, qualified=True)} {
  auto offset = ${cpp_class_name}::${self.offset_method_name(field)}(io_vector);
  % if field.is_variable_length():
  offset += ${cpp_class_name}::${self.field_size_method_name(field)}(io_vector);
  auto element_size = ${field.name}.${self.size_method_name(field.packet)}();
  auto packet_size = ${cpp_class_name}::${self.static_size_method_name(packet)}(io_vector);
  io_vector.expand(element_size, packet_size);
  io_vector.write_data<${self.type_name(field.type)}>(${field.name}, offset);
  ${self.class_name(packet.size_field.packet)}::${
      self.static_setter_name(packet.size_field)}(packet_size + element_size,
      io_vector);
    % if field.get_size_field():
  auto count = ${self.class_name(field.getsize_field().packet)}::${
      self.static_getter_name(field.get_size_field())}(io_vector);
  ${self.class_name(field.get_size_field().packet)}::${
      self.static_setter_name(field.size_field)}(count + 1, io_vector);
    % endif
  % else:
  io_vector.write_data<${cpp_type_name}>(${field.name}, offset);
  % endif
}
% endfor

% for field in packet.fields:
${self.offset_prototype(field, qualified=True)} {
  % if field.offset[1]:
  Variable offset not supported yet!
  % endif
  return ${field.offset[0]};
}

  % if field.is_variable_length():
${self.field_size_prototype(field, qualified=True)} {
  auto offset = ${cpp_class_name}::${self.offset_method_name(field)}(io_vector);
  auto size = ${cpp_class_name}::${self.static_size_method_name(packet)}(io_vector);
    % if field.get_size_field():
  auto count = ${cpp_class_name}::${self.static_getter_name(field.size_field)}(io_vector);
  return io_vector.get_repeated_data_size<${self.type_name(field.type)}>(
      offset, count, size);
    % else:
      ## This is an optimization for implicitly sized repeated fields.
  return size - offset;
    % endif
}
  % endif
% endfor

${self.size_prototype(packet, qualified=True)} {
  return ${cpp_class_name}::${self.static_size_method_name(packet)}(vector);
}

${self.static_size_prototype(packet, qualified=True)} {
  return ${self.class_name(packet.size_field.packet)}::${self.static_getter_name(packet.size_field)}(io_vector);
}

% endfor

<%block name="footer">
namespace cyrus {
namespace io {

% for packet in reversed(pom.packets.values()):
<%
  cpp_class_name = self.class_name(packet, qualified=True)
%>\

template<>
::std::shared_ptr<${cpp_class_name}> make_packet<${cpp_class_name}>(const ::cyrus::io::IoVector& io_vec) {
  % for p in packet.children:
  if (${self.type_selector_cond(p)}) {
    return make_packet<${self.class_name(p, qualified=True)}>(io_vec);
  }
  % endfor
  return ::std::make_shared<${cpp_class_name}>(io_vec);
}

% endfor

}  // namespace io
}  // namespace cyrus
</%block>


<%def name="type_selector_cond(packet)" buffered="True" filter="trim">
  <%
    annot = packet.annotations.get('type_selector')
    assert annot, 'Type selector cannot be empty for %s' % packet.name
  %>
  % if annot:
    % for field, value in annot.get_condition():
     ${self.class_name(field.packet, qualified=True)}::${self.static_getter_name(field)}(io_vec) == ${value}
    % endfor
  % endif
</%def>

