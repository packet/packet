# Copyright (c) 2013, The Packet Project.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# The GNU General Public License is contained in the file LICENSE.
#

packet Simple {
  @size uint8 x;
}

packet SimpleParent {
  char c;
  @size uint8 l;
}

@type_selector(c = 1)
packet AnotherSimple(SimpleParent) {
  Simple y;
}

@type_selector(c = 3)
packet YetAnotherSimple(SimpleParent) {
  @count(simples) int8 s;
  @repeated Simple simples;
  int8 test;
}

@type_selector(c = 4)
packet YetYetAnotherSimple(SimpleParent) {
  @size(a) int8 s;
  @repeated AnotherSimple a;
}

enum MathExpression {
  EXPR1 = (1 << 3),
  EXPR2 = ((8 << 0) + 1)
}

@type_selector(c = MathExpression.EXPR1)
packet MathExpressionPacket(SimpleParent) {
}

packet Offset {
  @repeated(count = 2) uint8 pad1;
  @repeated(count = 2) uint8 pad2;
  uint16 offset_field1;
  @repeated(count = 2) uint8 pad3;
  @repeated(count = 2) uint8 pad4;
  uint16 offset_field2;
}

@padded(multiple = 0x8)
packet Padded {
  @size uint8 len;
}

@padded(multiple = 0x08, excluded = "false")
packet PaddedExcluded {
  @size uint8 len;
}

packet PaddedIncluder {
  @size uint8 len;
  Padded padded;
  PaddedExcluded padded_excluded;
}

